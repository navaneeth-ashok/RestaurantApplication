@model RestaurantApplication.Models.Food

@{
    ViewBag.Title = "Edit " + @Html.DisplayFor(model => model.FoodName);
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>@Html.DisplayFor(model => model.FoodName)</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.FoodID)

    <div class="form-group">
        @Html.LabelFor(model => model.FoodName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FoodName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FoodName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("FoodType", "Current Food Type", new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FoodType.TypeDisplayName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id= "FoodType" } })
            @Html.ValidationMessageFor(model => model.FoodTypeID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FoodTypeID, "Update Food Type", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <select class="form-control" data-val="true" data-val-required="The Food Type field is required." id="FoodTypeID" name="FoodTypeID">
                <option value="@Model.FoodTypeID" selected>@Model.FoodTypeID</option>
            </select>
            @Html.ValidationMessageFor(model => model.FoodTypeID, "", new { @class = "text-danger" })
        </div>
    </div>



    @*<div class="form-group">
            <label for="cars">Choose a car:</label>

            <select name="cars" id="cars">
                <option value="volvo">Volvo</option>
                <option value="saab">Saab</option>
                <option value="mercedes">Mercedes</option>
                <option value="audi">Audi</option>
            </select>
        </div>*@



    <div class="form-group">
        @Html.LabelFor(model => model.FoodDescription, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FoodDescription, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FoodDescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FoodPrice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FoodPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FoodPrice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OfferPrice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OfferPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.OfferPrice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OrderCount, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OrderCount, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.OrderCount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FoodReviewStar, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FoodReviewStar, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FoodReviewStar, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script type="text/javascript">
        $(document).ready(function () {
            var serviceURL = 'api/FoodTypesData/GetFoodTypes';
            var baseApplicationPath = '@Url.Content("~/")';

                $.ajax({
                    type: "GET",
                    url: baseApplicationPath + serviceURL,
                    data: param = "",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: successFunc,
                    error: errorFunc
                });

            function successFunc(data, status) {
                // fetch the existing food type
                const selectedVal = $('#FoodTypeID').children('option:selected').val();
                console.log(selectedVal)
                // clear all the options before repopulating them
                $('#FoodTypeID').find('option').remove();
                for (items of data) {
                    let selected = "";
                    if (selectedVal == items['TypeID']) {
                        selected = "selected";
                    }
                    console.log(items['TypeID'] + ' ' + items['TypeName']);
                    $('#FoodTypeID').append(`<option value="${items['TypeID']}" ${selected}>${items['TypeName']}</option>`);
                    }

                }

                function errorFunc() {
                    alert('error');
                }
            });
</script>